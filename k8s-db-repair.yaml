apiVersion: v1
kind: Pod
metadata:
  name: hm-db-repair
  namespace: hm
spec:
  restartPolicy: Never
  securityContext:
    fsGroup: 1000
    fsGroupChangePolicy: OnRootMismatch
  volumes:
    - name: app-root
      persistentVolumeClaim:
        claimName: hm-app-root
  containers:
    - name: repair
      image: mediatriple/hm:0.4
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      command: ["/bin/sh","-lc"]
      args:
        - |
          set -eu
          TS=$(date +%s)
          SRC=/app/data/app.db
          BACK=/app/data/app.db.source.$TS
          if [ ! -f "$SRC" ]; then echo "No app.db to repair"; exit 1; fi
          mv "$SRC" "$BACK"
          echo "Moved original to $BACK"
          cat > /tmp/repair.py <<'PY'
import sqlite3, os
from pathlib import Path
# Initialize fresh schema using app.db.init_db
from app.db import init_db
init_db()
new_db = Path('data/app.db') if Path('data').exists() else Path('/app/data/app.db')
old_db = None
for p in Path('/app/data').glob('app.db.source.*'):
    old_db = p
# If multiple, pick latest
if old_db:
    old_db = max(Path('/app/data').glob('app.db.source.*'), key=lambda x: x.stat().st_mtime)
else:
    raise SystemExit('No backup db found')
coalesce_overrides = {
    'item': {'created_at': "COALESCE(created_at, datetime('now'))"},
    'order': {'source': "COALESCE(source, 'bizim')"},
}
with sqlite3.connect(str(new_db)) as dst:
    dst.execute('PRAGMA foreign_keys=OFF')
    dst.execute('ATTACH DATABASE ? AS old', (str(old_db),))
    with sqlite3.connect(str(old_db)) as src:
        src.execute('PRAGMA foreign_keys=OFF')
        tables = [r[0] for r in src.execute("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'")]
        copied = {}
        for t in tables:
            try:
                src_cols = [r[1] for r in src.execute(f"PRAGMA table_info('{t}')").fetchall()]
                dst_cols = [r[1] for r in dst.execute(f"PRAGMA table_info('{t}')").fetchall()]
            except sqlite3.Error:
                continue
            common = [c for c in src_cols if c in dst_cols]
            if not common:
                continue
            selects = []
            for c in common:
                expr = coalesce_overrides.get(t, {}).get(c)
                selects.append(expr if expr else f'"{c}"')
            cols_sql = ", ".join(f'"{c}"' for c in common)
            sel_sql = ", ".join(selects)
            try:
                dst.execute(f"INSERT OR IGNORE INTO " + '"' + t + '"' + f" ({cols_sql}) SELECT {sel_sql} FROM old." + '"' + t + '"')
                copied[t] = dst.total_changes
                dst.commit()
            except sqlite3.Error:
                dst.rollback()
                continue
print('copy done')
PY
          python /tmp/repair.py || true
          echo "Repair attempted"
      volumeMounts:
        - name: app-root
          mountPath: /app
