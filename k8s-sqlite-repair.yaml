apiVersion: v1
kind: Pod
metadata:
  name: hm-sqlite-repair
  namespace: hm
spec:
  restartPolicy: Never
  nodeName: mediatriplem4
  securityContext:
    fsGroup: 1000
    fsGroupChangePolicy: OnRootMismatch
  volumes:
    - name: app-root
      persistentVolumeClaim:
        claimName: hm-app-root
  containers:
    - name: repair
      image: debian:bookworm-slim
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      command: ["/bin/sh","-lc"]
      args:
        - |
          set -eu
          apt-get update && apt-get install -y --no-install-recommends sqlite3 ca-certificates && rm -rf /var/lib/apt/lists/*
          cd /app
          TS=$(date +%s)
          DB=/app/data/app.db
          if [ ! -f "$DB" ]; then echo "DB not found: $DB"; exit 1; fi
          cp "$DB" "/app/data/app.db.bak.$TS"
          echo "Backup created at /app/data/app.db.bak.$TS"
          # Prefer .recover, fallback to .dump
          sqlite3 "$DB" ".recover" > /app/data/recover.sql 2>/dev/null || true
          SRC=""
          if [ -s /app/data/recover.sql ]; then SRC=/app/data/recover.sql; fi
          if [ -z "$SRC" ]; then sqlite3 "$DB" ".dump" > /app/data/dump.sql 2>/dev/null || true; fi
          if [ -z "$SRC" ] && [ -s /app/data/dump.sql ]; then SRC=/app/data/dump.sql; fi
          if [ -z "$SRC" ]; then echo "No valid SQL to rebuild"; exit 1; fi
          rm -f /app/data/app.new.db
          sqlite3 /app/data/app.new.db ".read $SRC" 2>/dev/null || true
          if [ ! -s /app/data/app.new.db ]; then echo "Rebuild failed"; exit 1; fi
          chown 1000:1000 /app/data/app.new.db
          mv "$DB" "/app/data/app.db.corrupt.$TS"
          mv /app/data/app.new.db "$DB"
          echo "Replaced DB with rebuilt copy"
      volumeMounts:
        - name: app-root
          mountPath: /app
